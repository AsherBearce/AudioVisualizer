#define NUM_THREADS 8
#pragma kernel CSMain

float4 Size;

RWTexture3D<float4> VelocityWrite;
RWTexture3D<float> PressureRead, Obstacles;
RWTexture3D<float4> VelocityRead;

[numthreads(NUM_THREADS, NUM_THREADS, NUM_THREADS)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	if (Obstacles[id] > 0.1f) {
		VelocityWrite[id] = float4(0, 0, 0, 0);
		return;
	}

	uint3 Lp = uint3(max(0, id.x - 1), id.y, id.z);
	uint3 Rp = uint3(min(Size.x - 1, id.x + 1), id.y, id.z);
	uint3 Dp = uint3(id.x, max(0, id.y - 1), id.z);
	uint3 Up = uint3(id.x, min(Size.y - 1, id.y + 1), id.z);
	uint3 Bp = uint3(id.x, id.y, max(0, id.z - 1));
	uint3 Tp = uint3(id.x, id.y, min(Size.z - 1, id.z + 1));

	float L = PressureRead[Lp];
	float R = PressureRead[Rp];

	float D = PressureRead[Dp];
	float U = PressureRead[Up];

	float B = PressureRead[Bp];
	float T = PressureRead[Tp];

	float C = PressureRead[id];

	float4 mask = float4(1, 1, 1, 1);

	if (Obstacles[Lp] > 0.1f) { L = C; mask.x = 0; }
	if (Obstacles[Rp] > 0.1f) { R = C; mask.x = 0; }

	if (Obstacles[Bp] > 0.1f) { B = C; mask.z = 0; }
	if (Obstacles[Tp] > 0.1f) { T = C; mask.z = 0; }

	if (Obstacles[Dp] > 0.1f) { D = C; mask.y = 0; }
	if (Obstacles[Up] > 0.1f) { U = C; mask.y = 0; }

	float4 v = VelocityRead[id] - float4(R - L, T - B, U - D, 0) * 0.5;

	VelocityWrite[id] = v;
}
