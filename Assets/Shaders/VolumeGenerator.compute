// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "SimplexNoise.shader"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture3D<float4> current_state;
RWTexture3D<float4> prev_state;
float time;
int size;

void st_bound(uint3 id)
{
	uint x = id.x;
	uint y = id.y;

	//front and back
	float4 frontV = current_state[float3(id.x, id.y, 1)];
	float4 backV = current_state[float3(id.x, id.y, size - 2)];

	current_state[float3(id.x, id.y, 0)]       = float4(frontV.x, frontV.y, -frontV.z, frontV.w);
	current_state[float3(id.x, id.y, size - 1)] = float4(backV.x, backV.y, -backV.z, backV.w);
	//top and bottom
	float4 topV = current_state[float3(id.x, 1, id.y)];
	float4 bottomV = current_state[float3(id.x, size - 2, id.y)];

	current_state[float3(id.x, 0, id.y)]        = float4(topV.x, -topV.y, topV.z, topV.w);
	current_state[float3(id.x, size - 1, id.y)] = float4(bottomV.x, -bottomV.y, bottomV.z, bottomV.w);
	//left and right
	float4 leftV = current_state[float3(1, id.x, id.y)];
	float4 rightV = current_state[float3(size - 2, id.x, id.y)];

	current_state[float3(0, id.x, id.y)]        = float4(-leftV.x, leftV.y, leftV.z, leftV.w);
	current_state[float3(size - 1, id.x, id.y)] = float4(-rightV.x, rightV.y, rightV.z, rightV.w);

	//Do the corners (eventually);
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float v = snoise(float3(id.x + time * 64, id.y, id.z) / 128);
    current_state[id.xyz] = float4(v, 0, 0, 1.0f);
}

